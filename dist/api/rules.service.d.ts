import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { EvaluateRuleRequest } from '../model/evaluateRuleRequest';
import { EvaluateRuleResponse } from '../model/evaluateRuleResponse';
import { FlexiCoreRule } from '../model/flexiCoreRule';
import { FlexiCoreRuleLink } from '../model/flexiCoreRuleLink';
import { FlexiCoreRuleOp } from '../model/flexiCoreRuleOp';
import { PaginationResponse } from '@hanoch/fc_client';
import { RuleCreateOp } from '../model/ruleCreateOp';
import { RuleLinkCreate } from '../model/ruleLinkCreate';
import { RuleLinkFilter } from '../model/ruleLinkFilter';
import { RuleLinkUpdate } from '../model/ruleLinkUpdate';
import { RuleUpdate } from '../model/ruleUpdate';
import { RuleUpdateOp } from '../model/ruleUpdateOp';
import { Configuration } from '../configuration';
import { RulesFilter } from '../model/rulesFilter';
export declare class RulesService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private canConsumeForm;
    createRuleLink(body?: RuleLinkCreate, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<FlexiCoreRuleLink>;
    createRuleLink(body?: RuleLinkCreate, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FlexiCoreRuleLink>>;
    createRuleLink(body?: RuleLinkCreate, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FlexiCoreRuleLink>>;
    createRuleOp(body?: RuleCreateOp, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<FlexiCoreRuleOp>;
    createRuleOp(body?: RuleCreateOp, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FlexiCoreRuleOp>>;
    createRuleOp(body?: RuleCreateOp, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FlexiCoreRuleOp>>;
    evaluateRule(body?: EvaluateRuleRequest, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<EvaluateRuleResponse>;
    evaluateRule(body?: EvaluateRuleRequest, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EvaluateRuleResponse>>;
    evaluateRule(body?: EvaluateRuleRequest, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EvaluateRuleResponse>>;
    getAllRuleLinks(body?: RuleLinkFilter, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<FlexiCoreRuleLink>>;
    getAllRuleLinks(body?: RuleLinkFilter, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<FlexiCoreRuleLink>>>;
    getAllRuleLinks(body?: RuleLinkFilter, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<FlexiCoreRuleLink>>>;
    getAllRules(body?: RulesFilter, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<FlexiCoreRule>>;
    getAllRules(body?: RulesFilter, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<FlexiCoreRule>>>;
    getAllRules(body?: RulesFilter, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<FlexiCoreRule>>>;
    updateRule(body?: RuleUpdate, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<FlexiCoreRule>;
    updateRule(body?: RuleUpdate, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FlexiCoreRule>>;
    updateRule(body?: RuleUpdate, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FlexiCoreRule>>;
    updateRuleLink(body?: RuleLinkUpdate, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<FlexiCoreRuleLink>;
    updateRuleLink(body?: RuleLinkUpdate, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FlexiCoreRuleLink>>;
    updateRuleLink(body?: RuleLinkUpdate, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FlexiCoreRuleLink>>;
    updateRuleOp(body?: RuleUpdateOp, authenticationKey?: string, observe?: 'body', reportProgress?: boolean): Observable<FlexiCoreRuleOp>;
    updateRuleOp(body?: RuleUpdateOp, authenticationKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FlexiCoreRuleOp>>;
    updateRuleOp(body?: RuleUpdateOp, authenticationKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FlexiCoreRuleOp>>;
}
